{
  
    
        "post0": {
            "title": "(KR)01-함수형 코딩에 오신 것을 환영합니다.",
            "content": "에릭 노먼드의 쏙쏙 들어오는 함수형 코딩 1장을 읽고, 정리한 페이지입니다. . . 함수형 프로그래밍은 무엇인가? . 함수형 프로그래밍의 정의 . 수학 함수를 사용하고 부수 효과를 피하는 것이 특징인 프로그래밍 패러다임 부수 효과(side effect): 함수가 결괏값을 반환하는 것 외에 하는 모든 행동 | . | 부수 효과 없이 순수 함수만 사용하는 프로그래밍 스타일 순수 함수(pure function): 인자에만 의존하고, 부수 효과가 없는 함수 | . | . 위와 같은 정의의 문제점 . 위와 같은 정의는 학문적인 가치는 있을지 모르지만, 실용적인 측면에서 함수형 프로그래밍을 이해하는 데는 큰 도움이 되지 않음. 필요하다면, 부수 효과는 사용해야 함. | 순수하지 않은 함수 역시 필요한 경우에는 사용해야 함. | . | 본 책에서는 함수형 프로그래밍을 “학문적”으로 다루지 않고, 현업에 당장 적용할 수 있는 “기술”과 “개념”을 전달하는데 초점을 둘 예정. | . 액션 vs. 계산 vs. 데이터 . 함수형 프로그래밍에서는 코드를 액션, 계산, 데이터 세 가지로 구분함. | 세 가지 모두 필요하지만 장단점을 잘 알고 적절하게 쓰는 것이 중요함. | 일반적으로 데이터 &gt; 계산 &gt; 액션 순으로 사용하기 쉬움. | . 구분 특징 예시 . 액션(actions) | 실행 시점이나 횟수에 의존하기 때문에 신중하게 사용해야 함. | sendEmail(to, from, subject, body): 이메일 전송 saveUserDB(user) : 사용자 정보를 데이터 베이스에 저장 getCurrentTime() : 현재 시간 반환 | . 계산(calculations) | 입력값을 계산해 출력하는 것 언제 호출해도 항상 같은 값을 반환함. | sum(numbers): 입력 받은 숫자를 모두 더한 결과 반환 string_length(str): 입력 받은 문자열의 길이 반환 | . 데이터(data) | 이벤트에 대한 사실을 기록한 것 | {&quot;firstname&quot;: &quot;Eric&quot;, &quot;lastname&quot;: &quot;Normand&quot;}: 사람에 대한 정보 [1, 10, 2, 45, 3, 98]: 숫자 리스트 | . 시나리오로 살펴보는 액션 vs. 계산 vs. 데이터 . 프로젝트 관리를 위해 클라우드 서비스(여러 클라이언트가 작업 완료 표시를 하면 서버에서 이메일을 통해 알려주는 서비스)를 만든다고 가정 1단계: 사용자가 작업 완료 표시를 함. . | 액션, 실행 횟수에 의존하기 때문 2단계: 클라이언트가 서버로 메시지를 보냄. . | 메시지를 보내는 것은 액션이지만, 메시지 자체는 데이터 3단계: 서버가 메시지를 받음. . | 액션, 횟수에 의존하기 때문 4단계: 서버가 데이터베이스를 변경 . | 액션, 내부 상태를 바꾸기 때문 5단계: 서버가 누구에게 알림을 보낼지 결정 . | 결정하는 것은 계산 6단계: 서버가 이메일로 알림을 보냄 . | 이메일 보내기는 액션. 결정(계산)과 결정된 내용을 전송(액션)하는 것은 다름. | . 액션 vs. 계산 vs. 데이터로 구분하는 것의 장점 . 여러 컴퓨터가 네트워크를 통해 통신하는 분산 시스템의 경우, 소프트웨어가 복잡해짐. | 처리해야 할 메시지 순서가 섞이거나, 중복, 유실될 수도 있는데 실행 시점이나 횟수에 의존하는 코드를 데이터와 계산으로 바꿀수록 분산 시스템에서 생기는 여러 문제를 해결할 수 있음. | .",
            "url": "https://mangodm.github.io/tinychanges/cs/fp/2022/07/15/welcome-to-grokking-simplicity.html",
            "relUrl": "/cs/fp/2022/07/15/welcome-to-grokking-simplicity.html",
            "date": " • Jul 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "(EN) How to Solve Problems",
            "content": "These are notes taken from the Udacity&#39;s Data Structures and Algorithms Nanodegree program. . How to Solve Problems . Solving a problem is one of the most important skills in life, since nearly everything you do can be viewed as solving a problem. Therefore, improving as a problem solver is a lifelong challenge. In this course, we&#39;re going to look at a specific practice problem and talk about how to solve it. The goal of this is not just to solve that particular problem, but to draw some general lessons about how to get better as problem solvers in general. . Days Between Dates . The particular problem that we&#39;ll be working on is called, &quot;Days Between Dates&quot;, and it is: . Given your birthday and the current date, calculate your age in days. Compensate for leap days. Assume that the birthday and current date are correct dates (and no time travel). Simply put, if you were born on the 1 Jan, 2012, and today&#39;s date is 2 Jan, 2012. Then, you&#39;re 1 day old. . Step #1:Understanding the problem . The hardest thing about solving a problem is how to get started. . (Quiz) What might be the first thing to do when we meet the problem at the very first place? . Start writing code It&#39;s often tempting to do it too early, but the problem with it before knowing what needs to be done is we might write the wrong code. | . | Make sure we understand the problem It&#39;s the best option in general, and we&#39;ll cover what does it mean by &quot;understand the problem&quot; later. | . | Search Google for the answer It can be a very good option if this weren&#39;t the practice problem. There can be good solutions out there already! | . | Work out an algorithm that solves it Until we understand the problem well, we don&#39;t know what algorithm we should take. | . | What does it mean, &quot;to understand a (computational) problem&quot;? All computational problems have in common is that they have inputs and (desired) outputs. A solution to a problem is a procedure that can take any input in the possible sets and produce a desired output that satisfies the relationship we want. . Step #2: Understanding the inputs . The very first rule you need to keep in mind when solving a problem is, &quot;Don&#39;t Panic! And keep calm!&quot; This is because if you panic, you will not be able to solve the problem. After then, the next thing you should do is to check what the inputs are. . Let&#39;s figure out what are the inputs of the practice problem: . The inputs are two dates(your birthday and the current date). | What is the set of valid inputs? The second date should be after the first one. | The dates should be valid in the Gregorian calendar, which started in October 1582. | . | How are inputs represented? Six different values will be given to represent those two dates. (e.g. year1, month1, day1, year2, month2, day2) | . | . Step #3: Understanding the outputs . The desired output of the practice problem is the number of days between the first date and the second date. . Step #4: Understanding the relationship (w/ some examples) . You can start coding if you&#39;re confident, but you&#39;d better work out some examples to understand the relationship between inputs and outputs. . (Quiz) For each, give the expected output or undefined if there is no defined output. . days_between_dates(2012, 12, 7, 2012, 12, 7): 0 | days_between_dates(2012, 12, 7, 2012, 12, 8): 1 | days_between_dates(2012, 12, 8, 2012, 12, 7): undefined, since the second date is before the first date | days_between_dates(2012, 6, 29, 2013, 6, 29): 365 | days_between_dates(2012, 6, 29, 2013, 6, 31): undefined, since there is no June 31st in Gregorian calendar. | . Step #5: Consider systematically how a human solves the problem . (Quiz) Find the days between 24 Jan, 2013 and 29 June, 2013. . To solve the problem as a human, we might look at a calendar and count the days. . See how many days do we have left in Jan. (7 days) | Get the number of days in Feb, Mar, Apr, and May and add them up. (28, 31, 30, 31 days each) | Get the number of days until 29 June. (29 days) | Sum all those up! (156 days) | . Step #6: Develop a simple mechanical solution first . The very first approach suggested is to keep it simple as possible. How about starting on the day of first date, and just counting the days until we get the target date? If you&#39;re asked to do the job, you wouldn&#39;t want to do it. But a computer is quite good at doing the brain-dead approach. Once it turns out to be correct, you can come up with some better and efficient solutions later. . Simple mechanical alrogithm . days = 0 while date1 is before date2: date1 = advance to next day days += 1 return days . (Quiz) What should we write first when implementing a simple mechanical algorithm? . days_between_dates: to solve whole problem Too early! | . | next_day(year, month, day): to get the next day for simple case This is sort of the most important thing to make the solution work. | . | is_leap_year(year): to determine if year is leap year Okay to do it, but since it&#39;s a painful to start at the first place, it&#39;s better to leave that until later. | . | days_in_month(month): to get the number of days in a month Too early! | . | . from typing import Tuple def next_day(year: int, month: int, day: int) -&gt; Tuple[int, int, int]: &quot;&quot;&quot; Returns year, month, and day of the next day. This is a simple version, which assumes every month has 30 days. &quot;&quot;&quot; if day &lt; 30: return (year + 1, 1, 1) else: if month == 12: return (year + 1, 1, 1) else: return (year, month + 1, 1) . (Quiz) What should we do next? . refine next_day to work correctly for real months | define days_between_dates to give approximate answers using our next_day procedure Doing this first will give us a lot of confidence we&#39;re on the right track if this works. | . | . def days_between_dates(year1: int, month1: int, day1: int, year2: int, month2: int, day2: int) -&gt; int: &quot;&quot;&quot; Returns the number of days between year1/month1/day1 and year2/month2/day2. Assumes that inputs are valid dates in Gregorian calendar. And the first date is not after the second. &quot;&quot;&quot; .",
            "url": "https://mangodm.github.io/tinychanges/dsa/python/udacity/2022/06/05/how-to-solve-problems.html",
            "relUrl": "/dsa/python/udacity/2022/06/05/how-to-solve-problems.html",
            "date": " • Jun 5, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mangodm.github.io/tinychanges/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "그들의 장비와 기구는 모두 살아 있다. . 그들의 장비와 기구는 모두 살아 있다. . 그들의 장비와 기구는 모두 살아 있다. . 저 멀리 있는 별을 바라보는 일은 신성한 음악이나 고귀한 그림 또는 위대한 시인의 글귀와 같이 우리의 생각을 자극하고 정화하는 힘을 갖고 있어. 언제나 효과가 좋지. . Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mangodm.github.io/tinychanges/test/2020/01/14/test-markdown-post.html",
            "relUrl": "/test/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "배운 것들을 기록하는 공간입니다. .",
          "url": "https://mangodm.github.io/tinychanges/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mangodm.github.io/tinychanges/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}